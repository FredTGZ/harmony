<?php  namespace Harmony;
if (! defined('HARMONY_INCLUDE')) die("Harmony Library is not loaded !");
require_once("enum.php");
require_once("basefile.php");
require_once("xmlexception.php");

/** */
class CXMLTagType extends CEnum
{
	function CXMLTagType($value)
	{
		parent::__construct('open', 'close', 'complete', 'cdata');
		$this->SetValue($value);
	}
}

class CXMLTagAttribute
{
	public $Name = null;
	public $Value = null;
	
	function CXMLTagAttribute($name, $value)
	{
		$this->Name = $name;
		$this->Value = $value;
	}
}

class CXMLTag
{
	public $Type = null;
	public $Name = null;
	public $Level = null;
	public $Attributes = array();
	public $Content = array();

	function AddInnerTag($ParserArray)
	{
		$this->Content[] = CXMLTag($ParserArray);
	}

	function GetContent()
	{
	
	}

	function OpenTag()
	{
		if (($Type->GetValue() == 'close') || ($Type->GetValue() == 'cdata')) return '';
		
		$ret = '<'.$this->Name;
		
		foreach($this->Attributes as $key => $attribute)
			$ret.= sprintf(' %s="%s"', $attribute->Name, $attribute->Value);
		
		if ($Type->GetValue() == 'complete') $ret .= ' /';
		
		return $ret .= '>';
	
	}
	
	function CloseTag()
	{
		if ($Type->GetValue() == 'close') return sprintf('</%s>', $this->Name);
		else return '';
	}

	function CXMLTag($ParserArray)
	{
		$this->Type = new CXMLTagType($ParserArray['type']);
		$this->Name = strtolower($ParserArray['tag']);
		$this->Level = strtolower($ParserArray['level']);
		
		if (array_key_exists('attributes', $ParserArray))
			foreach($ParserArray['attributes'] as $name => $value)
				$this->Attributes[$name] = new CXMLTagAttribute(strtolower($name), $value);
	}
	
	function GetAttribute($name)
	{
		if (array_key_exists($name, $this->Attributes))
			return $this->Attributes[$name];
	}
}



/**\brief XML File access
 *\ingroup base
 */ 
class CXMLFile extends CBaseFile
{
	protected $Filename;
	protected $XMLData = array();
	protected $XMLIndex = array();
	protected $CodePage = "ISO-8859-1";
	
	/** Constructor
	 *\param[in]	$message	Error message
	 *\param[in]	$code	 	Error code (default is 0)
	 */		 		
	public function __construct($filename = "", $codepage="ISO-8859-1")
	{
		try {
			$this->CodePage = $codepage;
			$this->Filename = $filename;
			if ($this->Filename != "") $this->Read($codepage);
			else throw new CXMLException("No filename has been defined.");
		}
		catch (CXMLException $e) {
		    print($e->DisplayException());
		    return false;
		}
	}
	
	public function GetData()
	{
		return $this->XMLData;	
	}
	
	public function GetXML($generator=null)
	{
		$xml_code = sprintf('<?xml version="%s" encoding="%s"?'.'>', '1.0', $this->CodePage);
		if ($generator !== null) $xml_code .= sprintf("\n<!-- Generated by %s - %s -->", $generator, date('Y-m-d', time()));
		
		foreach($this->XMLData as $TagID => $Tag) {
			$line_string = "";
			$tab = "";
			
			for($i=1;$i<$Tag['level']; $i++) $tab .= "\t";
			
			if ($Tag['type'] == 'close') {
				$line_string = $tab.'</'.strtolower($Tag['tag'].'>');
			}
			elseif ($Tag['type'] == 'cdata') {
				if (isset($Tag['value']) && trim($Tag['value']) != '') $line_string = $tab."\t".trim($Tag['value']);
				else $line_string = '';
			}
			else {
				$line_string = $tab.'<'.strtolower($Tag['tag']);
				
				// Tag attributes
				if (isset($Tag['attributes'])) {
					foreach($Tag['attributes'] as $AtributeName => $AtributeValue)
						$line_string .= sprintf(' %s="%s"', strtolower($AtributeName), $AtributeValue);
	 			}
	
				if ($Tag['type'] == 'open')
					$line_string .= ">";
				elseif ($Tag['type'] == 'complete') {
					if (isset($Tag['value']))
						$line_string .= '>'.$Tag['value'].'</'.strtolower($Tag['tag']).'>';
					else
						$line_string .= ' />';
				}
					
			}
				
			if ($line_string != '') $xml_code .= "\n".$line_string;
		}
		return $xml_code;
	}
	
	public function AddTag($tag, $value='', array $attributes=null, $type="complete")
	{
		$index = count($this->XMLData) - 1;
		
		$Tag = array();
		$Tag['level'] = 2;

		$Tag['tag'] = $tag;
		
		if ($attributes != null) {
			$Tag['attributes'] = $attributes;
		}
		
		$Tag['value'] = $value;
		$Tag['type']= $type;
		
		$this->XMLData[$index + 1] = $this->XMLData[$index];
		$this->XMLData[$index] = $Tag;
	}
	
	/*
XML_ERROR_NONE 
XML_ERROR_NO_MEMORY 
XML_ERROR_SYNTAX 
XML_ERROR_NO_ELEMENTS 
XML_ERROR_INVALID_TOKEN 
XML_ERROR_UNCLOSED_TOKEN 
XML_ERROR_PARTIAL_CHAR 
XML_ERROR_TAG_MISMATCH 
XML_ERROR_DUPLICATE_ATTRIBUTE 
XML_ERROR_JUNK_AFTER_DOC_ELEMENT 
XML_ERROR_PARAM_ENTITY_REF 
XML_ERROR_UNDEFINED_ENTITY 
XML_ERROR_RECURSIVE_ENTITY_REF 
XML_ERROR_ASYNC_ENTITY 
XML_ERROR_BAD_CHAR_REF 
XML_ERROR_BINARY_ENTITY_REF 
XML_ERROR_ATTRIBUTE_EXTERNAL_ENTITY_REF 
XML_ERROR_MISPLACED_XML_PI 
XML_ERROR_UNKNOWN_ENCODING 
XML_ERROR_INCORRECT_ENCODING 
XML_ERROR_UNCLOSED_CDATA_SECTION 
XML_ERROR_EXTERNAL_ENTITY_HANDLING 
*/

	public function Write()
	{
		try {
			$xml = '<?xml version="1.0" encoding="utf-8"?>'.CBaseFile::$EOL;
			$level=0;
			
			for($i=0; $i<=count($this->XMLData); $i++) {
				$attributes = "";
					
				if (isset($this->XMLData[$i]['attributes']))
				foreach($this->XMLData[$i]['attributes'] as $AttributeName => $AttributeValue) {
					$attributes .= sprintf(' %s="%s"', $AttributeName, $AttributeValue);
				}
					
				if ($this->XMLData[$i]['type'] == 'open') {
					$xml .= '<'.$this->XMLData[$i]['tag'].$attributes.'>'.CBaseFile::$EOL.$this->XMLData[$i]['value'];
					$level++;
				}
				elseif ($this->XMLData[$i]['type'] == 'close') {
					$xml .= '</'.$this->XMLData[$i]['tag'].'>'.CBaseFile::$EOL;
					$level--;
				}
				elseif ($this->XMLData[$i]['type'] == 'complete') {
					for ($j=0; $j<=$level; $j++) $xml .= CBaseFile::$TAB;
					$xml .= '<'.$this->XMLData[$i]['tag'].$attributes.' />'.CBaseFile::$EOL;
			
				}
				$enc = iconv_get_encoding();
				iconv_set_encoding(output_encoding, 'utf-8');
				if ($hFile = fopen($this->Filename, "w")) {
					fwrite($hFile, utf8_encode($xml));
					fclose($hFile);
				}
				iconv_set_encoding(output_encoding, $enc['output_encoding']);
			}
			
			return true;
		}
		catch (CXMLException $e) {
		    print($e->DisplayException());
		    return false;
		}
	}
	
	protected function DeleteData()
	{
		$this->XMLData = "";
	}

	public function Read()
	{
		try {
			$xml_code = file_get_contents($this->Filename);
			
			if ($parser = xml_parser_create($this->CodePage)) {
				if (0 === xml_parse_into_struct($parser, $xml_code, $this->XMLData, $this->XMLIndex))
					throw new CXMLException("Can't parse file $this->Filename".file_get_contents($this->Filename));
				
				if (false === xml_parser_free($parser)) {
					throw new CXMLException("Can't free parser.");
				}
				
				
				$Level = 0;
				
				/*foreach($this->XMLData as $key => $Tag)
				{
					$XMLTag = new CXMLTag($Tag);

					if ($XMLTag->Type->GetValue() == "open") {
					
					
					}
				}*/
				
				return true;
			}
			else throw new CXMLException("Can't create parser.");
		}
		catch (CXMLException $e) {
		    print($e->DisplayException());
		    return false;
		}
	
	}
	
	public function XSDValidation($XSDFilename)
	{
		try {
			$xml = new DOMDocument();
			$xml->load($this->Filename);
			
			if (!$xml->schemaValidate($XSDFilename))
				throw new CXMLException('XSD Validation Error', 1);
		}
		catch(CXMLException $e) {
			$e->DisplayExceptionAndDie();
		}
	}

	public function Dump()
	{
		print('<hr style="border-top:thin black solid; border-left: none; border-right: none; border-bottom: none;">');
		print_r($this->XMLData);
		print('<hr style="border-top:thin black solid; border-left: none; border-right: none; border-bottom: none;">');
	}
}
?>
