<?php namespace Harmony\database;if (! defined('HARMONY_INCLUDE')) die("Harmony Library is not loaded !");use harmony\CBaseFile;//////////////////////////////////////////////////////////////////////////////////// Author: Herrou Fr�d�ric// Filename: database.inc//////////////////////////////////////////////////////////////////////////////////require_once("recordset.php");/**\brief Manage database access and querying. * * \detailsThis class is used for connection to database and to make SQL queries. In fact, you must use it if you want to use the CRecordset class to manage recordsets.\n * * \ingroup database */class CDatabase{    private $ServerType = null;    private $ServerName = null;    private $ServerPort = null;    private $DBName = null;    private $UserName = null;    private $Password = null;    private $Resource = null;    private $last_error_string = null;    private $query_index = 0;    private $Query = array();    private $LastID = -1;        public static $MYSQL = "MYSQL_DATABASE";    public static $MSSQL = "MSSQL_DATABASE";    public static $localhost = "localhost";        /**     * Obtient le nom de la base de données     * @return string     */    public function GetDBName()    {        return $this->DBName;    }        /**     *      * @return NULL     */    public function GetIdentifier() { return $this->Resource; }        /**     *     * @param string $servertype Server type (enum)     * @param string $servername   Server name (i.e. localhost)     * @param string $dbname Database name (i.e. mydb)     * @param string $username User name for the connection     * @param string $password Password for the connection     * @param string $serverportPort to connect to the server     */    public function __construct($servertype='', $servername='', $dbname='', $username='', $password='', $serverport='')    {        assert('$servername != ""');        assert('$servertype != ""');        assert('$username != ""');        assert('$dbname != ""');                $this->ServerType = $servertype;        $this->ServerName = $servername;        $this->ServerPort = $serverport;        $this->DBName = $dbname;        $this->UserName = $username;        $this->Password = $password;            }        public function Backup($dbname, $path, $maxline=300)    {        $tables = $this->GetDBTablesList($dbname);        $report = sprintf("<h1>Backup Database [%s]</h1>", $dbname);        //$l=0;                foreach($tables as $table) {            $file = new CBaseFile($path.'/'.$table.'.sql');                        $count = $this->GetFirst("SELECT COUNT(*) FROM `".$table."`");            $report .= sprintf("<br><b>%s (%u row(s))</b>", $table, $count);                        set_time_limit(ceil($maxline / 50));            $filename = sprintf('%s/%s/%s.sql', \Harmony\CHTTPServer::GetDocumentRoot(), $path, $table);            $fields = $this->GetDBTableFields($table);                        $select_query = '`';                        foreach($fields as $field) {                $select_query .= $field['Field'].'`, `';            }                        $min=0;            $max=$maxline;            $select_query = substr($select_query, 0, strlen($select_query)-3);                        $max_occ = ceil($count/$maxline);                        $sql_text = sprintf("DELETE FROM `%s`;\n", $table);            for($i=0; $i<$max_occ; $i++) {                $min = $i * $maxline;                $max = min(($i+1) * $maxline, $count);                $query = sprintf("SELECT %s FROM %s ORDER BY 1 LIMIT %u,%u", $select_query, $table, $min, $max);                $recordset = new CRecordset($this);                $j=0;                                if ($recordset->OpenRecordset($query)) {                    while(!$recordset->IsEOF()) {                        $values = "'";                        foreach($fields as $field) {                            $values .= str_replace("'", "''", $recordset->GetFieldValue($field['Field']))."', '";                        }                                                $values = sprintf("INSERT INTO `%s` (%s) VALUES(%s);\n", $table, $select_query, substr($values, 0, strlen($values)-3));                        $sql_text .= $values;                        $recordset->MoveNext();                    }                }            }                        $file->SetContent($sql_text);                        //$l++;            //if ($l>=10) break;        }                print $report;            }        /**\brief Open database connection.     *\details Throw an exception (and die) if the connection is impossible.     */    public function Open()    {        try {            if ($this->Resource != null) return;                        if ($this->ServerPort !== '') $serverfullname = $this->ServerName.':'.$this->ServerPort;            else $serverfullname = $this->ServerName;                        switch ($this->ServerType)            {                case 'MSSQL_DATABASE':                    if ($this->Resource = mssql_connect ($serverfullname, $this->UserName, $this->Password, true)) {                        if (!mssql_select_db($this->DBName, $this->Resource)) {                            $this->SetLastError(0, mssql_get_last_message());                            throw new CDBException(mssql_get_last_message());                        }                                                return true;                    }                    else {                        $this->SetLastError(0, mssql_get_last_message());                        throw new CDBException(mssql_get_last_message());                    }                                        break;                case 'MYSQL_DATABASE':                    if ($this->Resource = mysqli_connect ($serverfullname, $this->UserName, $this->Password)) {                        if (!mysqli_select_db($this->Resource, $this->DBName)) {                            $this->SetLastError(mysqli_errno($this->Resource), mysqli_error($this->Resource));                            throw new CDBException(mysqli_error($this->Resource), mysqli_errno($this->Resource));                        }                                                mysqli_query($this->Resource, "SET NAMES cp1251");                        //die();                                                return true;                    }                    else {                        //$this->SetLastError(mysqli_errno($this->Resource), mysqli_error($this->Resource));                        throw new CDBException("An error occured during the opening of the database.", 0/*mysqli_error($this->Resource), mysqli_errno($this->Resource)*/);                    }                                        break;                default:                    throw new CDBException("Unknown database type: ".$this->ServerType);                    break;            }        }        catch (CDBException $e) {            print($e->DisplayExceptionAndDie());            return false;        }    }        /**\brief Get SGBD informations.     */    public function GetServerInfo()    {        $infos = array();        $infos['type'] = strtolower($this->ServerType);        $infos['hostname'] = $this->ServerName;        $infos['port'] = ($this->ServerPort==''?'default':$this->ServerPort);        $infos['php'] = phpversion();                switch ($this->ServerType)        {            case 'MSSQL_DATABASE':                $query_index = $this->ExecuteSQLQuery("exec xp_msver 'ProductVersion'");                                if (false !== $query_index) {                    $array = $this->FetchQuery($query_index);                    $infos['server'] = $array['Character_Value'];                }                                $infos['client'] = '';                break;            case 'MYSQL_DATABASE':                $infos['server'] = mysqli_get_server_info($this->Resource);                $infos['client'] = mysqli_get_client_info($this->Resource);                break;        }                return $infos;    }            /**\brief Close database connection.     *\details Throw an exception (but don't die) if database connection could not be closed.     *\return Query index or false if there were an error.     */    public function Close()    {        try {            switch ($this->ServerType)            {                case 'MSSQL_DATABASE':                    if (! mssql_close()) {                        $this->SetLastError(0, mssql_get_last_message());                        throw new CDBException(mssql_get_last_message());                    }                    break;                case 'MYSQL_DATABASE':                    if (! mysqli_close($this->Resource)) {                        $this->SetLastError(mysqli_errno($this->Resource), mysqli_error($this->Resource));                        throw new CDBException(mysqli_error($this->Resource), mysqli_errno($this->Resource));                    }                    break;            }                        $this->Resource = null;            return ($this->query_index-1);        }        catch (CDBException $e) {            print($e->DisplayException());            return false;        }    }        /***************************************************************************     *     *     **************************************************************************/    public function GetFieldType($query_index, $field_index)    {        switch ($this->ServerType)        {            case 'MSSQL_DATABASE':                return mssql_field_type($this->Query[$query_index], $field_index);            case 'MYSQL_DATABASE':                $field = mysqli_fetch_field_direct($this->Query[$query_index], $field_index);                return $field->type;        }    }        /***************************************************************************     *     *     **************************************************************************/    public function GetFieldLen($query_index, $field_index)    {        switch ($this->ServerType)        {            case 'MSSQL_DATABASE':                return mssql_field_len($this->Query[$query_index], $field_index);            case 'MYSQL_DATABASE':                $field = mysqli_fetch_field_direct($this->Query[$query_index], $field_index);                return $field->length;        }    }        /***************************************************************************     *     *     **************************************************************************/    public function GetFieldFlags($query_index, $field_index)    {        switch ($this->ServerType)        {            case 'MSSQL_DATABASE':                //return mssql_field_flags($this->Query[$query_index], $field_index);            case 'MYSQL_DATABASE':                $field = mysqli_fetch_field_direct($this->Query[$query_index], $field_index);                return $field->flags;        }    }        /***************************************************************************     *     *     **************************************************************************/    public function GetCount($queryindex)    {        switch ($this->ServerType)        {            case 'MSSQL_DATABASE':                return mssql_num_rows($this->Query[$queryindex]);            case 'MYSQL_DATABASE':                return mysqli_num_rows($this->Query[$queryindex]);        }    }        /**\brief Execute a SQL query.     *\details Throw an exception (but don't die) if database connection could not be closed.     *\param[in] $SQLQuery Query to execute     *\return Query index or false if there were an error.     */    public function ExecuteSQLQuery($SQLQuery)    {        try        {            $this->ResetError();                        switch ($this->ServerType)            {                case 'MSSQL_DATABASE':                    if (!($this->Query[$this->query_index] = mssql_query($SQLQuery, $this->Resource))) {                        $this->SetLastError(0, mssql_get_last_message());                        throw new CDBException(mssql_get_last_message());                    }                    break;                case 'MYSQL_DATABASE':                    $this->Query[$this->query_index] = mysqli_query($this->Resource, $SQLQuery);                                        if ($this->Query[$this->query_index] === false) {                        $this->SetLastError(mysqli_errno($this->Resource), mysqli_error($this->Resource));                        throw new CDBException(mysqli_error($this->Resource), mysqli_errno($this->Resource));                    }                    break;            }            $this->InternalGetLastID();            $this->query_index++;                        return ($this->query_index-1);        }        catch(CDBException $e)        {            print($e->DisplayException());            return false;        }            }        /***************************************************************************     *     *     **************************************************************************/    function TruncateTable($TableName)    {        return $this->ExecuteSQLQuery('TRUNCATE TABLE `'.$TableName.'`');    }        /***************************************************************************     *     *     **************************************************************************/    function GetValue($SQLQuery, $VarName)    {        $query_index = $this->ExecuteSQLQuery($SQLQuery);        if (false !== $query_index) {            $array = $this->FetchQuery($query_index);            if ($array) return($array[$VarName]);            else return false;        }        else return false;    }        /***************************************************************************     *     *     **************************************************************************/    private function InternalGetLastID()    {        switch ($this->ServerType)        {            case 'MSSQL_DATABASE':                if ($result = mssql_query('SELECT @@IDENTITY',  $this->Resource)) {                    if ($record = mssql_fetch_row($result)) $this->LastID=$record[0];                    else $this->LastID=-1;                }                else $this->LastID=-1;                break;            case 'MYSQL_DATABASE':                if ($result = mysqli_query($this->Resource, 'SELECT LAST_INSERT_ID()')) {                    if ($record = mysqli_fetch_row($result)) $this->LastID=$record[0];                    else $this->LastID=-1;                }                else $this->LastID=-1;                break;        }    }        /***************************************************************************     *     *     **************************************************************************/    public function GetLastID()    {        return $this->LastID;    }        /***************************************************************************     *     *     **************************************************************************/    public function FetchQuery($QueryIndex=0)    {        switch ($this->ServerType)        {            case 'MSSQL_DATABASE':                return mssql_fetch_array($this->Query[$QueryIndex], MSSQL_ASSOC);                break;            case 'MYSQL_DATABASE':                return mysqli_fetch_array($this->Query[$QueryIndex], MYSQLI_ASSOC);                break;        }    }        /***************************************************************************     *     *     **************************************************************************/    public function CloseQuery()    {            }        /***************************************************************************     *     *     **************************************************************************/    public function DataSeek($QueryIndex=0, $row_index)    {        switch ($this->ServerType)        {            case 'MSSQL_DATABASE':                break;                if (!mssql_data_seek ($this->Query[$QueryIndex], $row_index)) {                    $this->SetLastError(mysqli_errno($this->Resource), mysqli_error($this->Resource));                    return false;                }            case 'MYSQL_DATABASE':                if (!mysqli_data_seek ($this->Query[$QueryIndex], $row_index)) {                    $this->SetLastError(mysqli_errno($this->Resource), mysqli_error($this->Resource));                    return false;                }                break;        }                return true;    }        /***************************************************************************     *     *     **************************************************************************/    public function ResetError()    {        $this->last_error_string = "";    }        /***************************************************************************     *     *     **************************************************************************/    public function SetLastError($ErrorNumber, $ErrorString, $description='')    {        //if ($description !== '') $description=EOL."Description: ".$description;        $this->last_error_string = sprintf("<BR>%s Error < %ld >: %s. %s", $this->ServerType, $ErrorNumber, $ErrorString, $description);    }        /**\brief Test if a row exists in a given table.     *\details Execute a simple SELECT 1 FROM [table] WHERE [criteria]     *\param[in] $TableName Table to operate     *\param[in] $Criteria Criteria for the auto-generated query     *\return true if the row exist, false else.     */    public function RowExist($TableName, $Criteria)    {        $query = "SELECT 1 FROM `".$TableName."` WHERE ".$Criteria;        $recordset_exist = new CRecordset($this);                if ($recordset_exist->OpenRecordset($query)) {            return($recordset_exist->GetRecordCount() > 0);        }        else return false;    }        /***************************************************************************     *     *     **************************************************************************/    public function GetFirst($query)    {        $recordset = new CRecordset($this);                if ($recordset->OpenRecordset($query)) {            $fields = $recordset->GetFieldArray();            if ($fields != null)                return(array_shift($fields));                else return null;        }        else return false;    }        /**\brief Get the message from the last error occured.     *\return The message itself.     */    public function GetLastError()    {        return($this->last_error_string);    }        /***************************************************************************     *     *     **************************************************************************/    public function TransformValue($value)    {        return str_replace("'", "\'", $value);    }        /***************************************************************************     *     *     **************************************************************************/    public function GetDBList()    {        try {            if ($this->Resource) {                $databases = array();                                switch ($this->ServerType)                {                    case 'MSSQL_DATABASE':                        $query = "select [name] from [master].[dbo].[sysdatabases]";                                                $recordset = new CRecordset($this);                                                if ($recordset->OpenRecordset($query)) {                            while (!$recordset->IsEOF()) {                                $databases[] = $recordset->GetFieldValue("name");                                $recordset->MoveNext();                            }                            sort($databases);                        }                        else return false;                        break;                    case 'MYSQL_DATABASE':                        if ($result = mysqli_query($this->Resource, "SHOW DATABASES")) {                            while ($record = mysqli_fetch_array($result)) $databases[] = $record[0];                            sort($databases);                        }                        else return false;                                                break;                }                                return $databases;            }            else throw new CDBException(0, "Not connected");        }        catch (CDBException $e) {            print($e->DisplayException());            return false;        }    }        /***************************************************************************     *     *     **************************************************************************/    public function GetDBTablesList($databasename)    {        try {            if ($this->Resource) {                switch ($this->ServerType)                {                    case 'MSSQL_DATABASE':                        break;                    case 'MYSQL_DATABASE':                        $tables = array();                        if ($result = mysqli_query("SHOW TABLES FROM ".$databasename, $this->Resource)) {                            for ($i = 0; $i < mysql_num_rows($result); $i++)                                $tables[] = mysql_tablename($result, $i);                                sort($tables);                                return $tables;                        }                        else throw new CDBException(mysqli_error($this->Resource), mysqli_errno($this->Resource));                        break;                }            }            else throw new CDBException(0, "Not connected");        }        catch (CDBException $e) {            print($e->DisplayException());            return false;        }    }        /***************************************************************************     *     *     **************************************************************************/    public function GetDBTableFields($table)    {        try {            if ($this->Resource) {                $fields = array();                                switch ($this->ServerType)                {                    case 'MSSQL_DATABASE':                        break;                    case 'MYSQL_DATABASE':                        if ($result = mysqli_query($this->Resource, "SHOW COLUMNS FROM `" . $table . "`")) {                            if (mysqli_num_rows($result) > 0) {                                while ($row = mysqli_fetch_assoc($result)) {                                    $fields[] = $row;                                }                            }                        }                        else throw new CDBException(mysqli_error($this->Resource), mysqli_errno($this->Resource));                                                break;                }                                return $fields;            }            else throw new CDBException("Not connected", 1);        }        catch (CDBException $e) {            print($e->DisplayException());            return false;        }                return false;    }        public function SetCharset($charset)    {        if ($this->Resource === null) return false;                return ($this->ExecuteSQLQuery("SET NAMES '".$charset."'") && $this->ExecuteSQLQuery("SET CHARACTER SET ".$charset));    }        public function RealEscapeString($string) { return mysqli_real_escape_string($this->Resource, $string); }}?>